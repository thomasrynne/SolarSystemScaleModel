package solarsystemscalemodel.mithril

import solarsystemscalemodel.mithril.MithrilBundle.TagFactory

import scalatags.generic

trait SvgTags extends generic.SvgTags[MithrilBuilder, MithrilElement, MithrilNode] with TagFactory {
  val altGlyph = typedTag[MithrilElement]("altglyph") 
  val altGlyphDef = typedTag[MithrilElement]("altglyphdef") 
  val altGlyphItem = typedTag[MithrilElement]("altglyphitem") 
  val animate = typedTag[MithrilElement]("animate") 
  val animateMotion = typedTag[MithrilElement]("animatemotion") 
  val animateTransform = typedTag[MithrilElement]("animatetransform") 
  val circle = typedTag[MithrilElement]("circle") 
  val clipPath = typedTag[MithrilElement]("clippath") 
  val `color-profile` = typedTag[MithrilElement]("color-profile") 
  val cursor = typedTag[MithrilElement]("cursor") 
  val defs = typedTag[MithrilElement]("defs") 
  val desc = typedTag[MithrilElement]("desc") 
  val ellipse = typedTag[MithrilElement]("ellipse") 
  val feBlend = typedTag[MithrilElement]("feblend") 
  val feColorMatrix = typedTag[MithrilElement]("fecolormatrix") 
  val feComponentTransfer = typedTag[MithrilElement]("fecomponenttransfer") 
  val feComposite = typedTag[MithrilElement]("fecomposite") 
  val feConvolveMatrix = typedTag[MithrilElement]("feconvolvematrix") 
  val feDiffuseLighting = typedTag[MithrilElement]("fediffuselighting") 
  val feDisplacementMap = typedTag[MithrilElement]("fedisplacementmap") 
  val feDistantLighting = typedTag[MithrilElement]("fedistantlighting") 
  val feFlood = typedTag[MithrilElement]("feflood") 
  val feFuncA = typedTag[MithrilElement]("fefunca") 
  val feFuncB = typedTag[MithrilElement]("fefuncb") 
  val feFuncG = typedTag[MithrilElement]("fefuncg") 
  val feFuncR = typedTag[MithrilElement]("fefuncr") 
  val feGaussianBlur = typedTag[MithrilElement]("fegaussianblur") 
  val feImage = typedTag[MithrilElement]("feimage") 
  val feMerge = typedTag[MithrilElement]("femerge") 
  val feMergeNode = typedTag[MithrilElement]("femergenode") 
  val feMorphology = typedTag[MithrilElement]("femorphology") 
  val feOffset = typedTag[MithrilElement]("feoffset") 
  val fePointLight = typedTag[MithrilElement]("fepointlight") 
  val feSpecularLighting = typedTag[MithrilElement]("fespecularlighting") 
  val feSpotlight = typedTag[MithrilElement]("fespotlight") 
  val feTile = typedTag[MithrilElement]("fetile") 
  val feTurbulance = typedTag[MithrilElement]("feturbulance") 
  val filter = typedTag[MithrilElement]("filter") 
  val font = typedTag[MithrilElement]("font") 
  val `font-face` = typedTag[MithrilElement]("font-face") 
  val `font-face-format` = typedTag[MithrilElement]("font-face-format") 
  val `font-face-name` = typedTag[MithrilElement]("font-face-name") 
  val `font-face-src` = typedTag[MithrilElement]("font-face-src") 
  val `font-face-uri` = typedTag[MithrilElement]("font-face-uri") 
  val foreignObject = typedTag[MithrilElement]("foreignobject") 
  val g = typedTag[MithrilElement]("g") 
  val glyph = typedTag[MithrilElement]("glyph") 
  val glyphRef = typedTag[MithrilElement]("glyphref") 
  val hkern = typedTag[MithrilElement]("hkern") 
  val image = typedTag[MithrilElement]("image") 
  val line = typedTag[MithrilElement]("line") 
  val linearGradient = typedTag[MithrilElement]("lineargradient") 
  val marker = typedTag[MithrilElement]("marker") 
  val mask = typedTag[MithrilElement]("mask") 
  val metadata = typedTag[MithrilElement]("metadata") 
  val `missing-glyph` = typedTag[MithrilElement]("missing-glyph") 
  val mpath = typedTag[MithrilElement]("mpath") 
  val path = typedTag[MithrilElement]("path") 
  val pattern = typedTag[MithrilElement]("pattern") 
  val polygon = typedTag[MithrilElement]("polygon") 
  val polyline = typedTag[MithrilElement]("polyline") 
  val radialGradient = typedTag[MithrilElement]("radialgradient") 
  val rect = typedTag[MithrilElement]("rect") 
  val set = typedTag[MithrilElement]("set") 
  val stop = typedTag[MithrilElement]("stop") 
  val svg = typedTag[MithrilElement]("svg") 
  val switch = typedTag[MithrilElement]("switch") 
  val symbol = typedTag[MithrilElement]("symbol") 
  val text = typedTag[MithrilElement]("text") 
  val textPath = typedTag[MithrilElement]("textpath") 
  val tref = typedTag[MithrilElement]("tref") 
  val tspan = typedTag[MithrilElement]("tspan") 
  val use = typedTag[MithrilElement]("use") 
  val view = typedTag[MithrilElement]("view") 
  val vkern = typedTag[MithrilElement]("vkern") 
}
